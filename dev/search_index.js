var documenterSearchIndex = {"docs":
[{"location":"library/#Library-1","page":"Library","title":"Library","text":"","category":"section"},{"location":"library/#","page":"Library","title":"Library","text":"Pages = [\"library.md\"]\nDepth = 2","category":"page"},{"location":"library/#Public-API-1","page":"Library","title":"Public API","text":"","category":"section"},{"location":"library/#","page":"Library","title":"Library","text":"influence_matrix\ninfluence_matrix!\npressure_coefficients\nAbstractKernel\nParabolicKernel\nQuarticKernel","category":"page"},{"location":"library/#DLM.influence_matrix","page":"Library","title":"DLM.influence_matrix","text":"influence_matrix(ω, U, M, xyz::AbstractVector{<:AbstractArray{<:Number, 3}}, symmetric::AbstractVector; kernel=QuarticKernel())\ninfluence_matrix(ω, U, M, xyz::AbstractArray{<:Number, 3}, symmetric; kernel=QuarticKernel())\ninfluence_matrix(ω, U, M, xyzr::AbstractArray{<:Number, 3}, xyzs::AbstractArray{<:Number, 3}, symmetric; kernel=QuarticKernel())\n\nFills in aerodynamic influence coefficient matrix. Returns aerodynamic influence coefficient matrix AIC with shape (nir, njr, nis, njs). For a non-allocating version, see influence_matrix!.\n\nReceiving and sending panel points must be aligned with the x-direction. The freestream velocity must also be aligned in the x-direction.\n\nArguments\n\nω: oscillation frequency\nU: freestream velocity\nM: Mach number (for Prandtl-Glauert compressibility correction)\nxyzr: definition of receiving panel points with shape: (3, nir, njr)\nxyzs: definition of sending panel points with shape: (3, nis, njs)\nsymmetric: flag indicating symmetry of each sending panel\nkernel: indicates which approximation of the kernel should be used\n\n\n\n\n\n","category":"function"},{"location":"library/#DLM.influence_matrix!","page":"Library","title":"DLM.influence_matrix!","text":"influence_matrix!(AIC, ω, U, M, xyz::AbstractVector{<:AbstractArray{<:Number, 3}}, symmetric::AbstractVector; kernel=QuarticKernel())\ninfluence_matrix!(AIC, ω, U, M, xyz::AbstractArray{<:Number, 3}, symmetric; kernel=QuarticKernel())\ninfluence_matrix!(AIC, ω, U, M, xyzr::AbstractArray{<:Number, 3}, xyzs::AbstractArray{<:Number, 3}, symmetric; kernel=QuarticKernel())\n\nNon-allocating version of influence_matrix\n\n\n\n\n\n","category":"function"},{"location":"library/#DLM.pressure_coefficients","page":"Library","title":"DLM.pressure_coefficients","text":"pressure_coefficients(AIC, w)\n\nCompute pressure coefficients Cp on each panel, given the downwash w.\n\nArguments:\n\nAIC: aerodynamic influence coefficient matrix with shape (nir, njr, nis, njs)\nw: downwash on each panel, with shape (nir, njr)\n\n\n\n\n\n","category":"function"},{"location":"library/#DLM.AbstractKernel","page":"Library","title":"DLM.AbstractKernel","text":"AbstractKernel()\n\nAbstract type for approximation of the planar and nonplanar influence terms in the numerator of the doublet lattice method kernel\n\n\n\n\n\n","category":"type"},{"location":"library/#DLM.ParabolicKernel","page":"Library","title":"DLM.ParabolicKernel","text":"ParabolicKernel()\n\nParabolic approximation for the planar and nonplanar influence terms in the numerator of the doublet lattice method kernel.\n\n\n\n\n\n","category":"type"},{"location":"library/#DLM.QuarticKernel","page":"Library","title":"DLM.QuarticKernel","text":"QuarticKernel()\n\nQuartic approximation for the planar and nonplanar influence terms in the numerator of the doublet lattice method kernel.\n\n\n\n\n\n","category":"type"},{"location":"library/#Private-API-1","page":"Library","title":"Private API","text":"","category":"section"},{"location":"library/#","page":"Library","title":"Library","text":"DLM.approximate_kernel_integrals\nDLM.kernel_coefficients\nDLM.kernel_numerator\nDLM.influence_coefficient\nDLM.steady_influence_coefficient","category":"page"},{"location":"library/#DLM.approximate_kernel_integrals","page":"Library","title":"DLM.approximate_kernel_integrals","text":"approximate_kernel_integrals(u, k)\n\nSolves for the integrals I0 and J0 using a 12-term exponential approximation given by Desmarais in \"AN ACCURATE METHOD FOR EVALUATING THE KERNEL OF THE INTEGRAL EQUATION RELATING LIFT TO DOWNWASH IN UNSTEADY POTENTIAL FLOW\".\n\nArguments\n\nu = (MR - x0)/(β^2x0)\nk = ω*r/U\n\n\n\n\n\n","category":"function"},{"location":"library/#DLM.kernel_coefficients","page":"Library","title":"DLM.kernel_coefficients","text":"kernel_coefficients(x0, y0, z0, ω, U, M)\n\nSolves for the kernel coefficients K1 and K2 and their steady state counterparts K10 and K20.\n\nSee \"A Doublet-Lattice Method for Calculating Lift Distributions on Oscillating Surfaces in Subsonic Flows\" by Edward Albano and William P Rodden.\n\nArguments\n\nx0 = x-ξ\ny0 = y-η\nz0 = z-ζ\nω = frequency\nU = Velocity\nM = Mach Number\n\n\n\n\n\n","category":"function"},{"location":"library/#DLM.kernel_numerator","page":"Library","title":"DLM.kernel_numerator","text":"kernel_numerator(ω, U, M, x0, y0, z0, γr, γs)\n\nSolves for the numerator terms of the kernel and subtracts out the steady-state components of these terms.\n\nSee \"Further Refinement of the Subsonic Doublet-Lattice Method\" by William P. Rodden, Paul F. Taylor and Samuel C. McIntosh Jr.\n\n\n\n\n\n","category":"function"},{"location":"library/#DLM.influence_coefficient","page":"Library","title":"DLM.influence_coefficient","text":"influence_coefficient(ω, U, M, (xr, yr, zr), (xi, yi, zi), (xo, yo, zo),     chord, λ, γr, γs, kernel)\n\nSolves for the influence coefficient of the sending panel on the receiving panel.\n\nThe planar and nonplanar influence terms in the numerator are approximated using the approximation specified by kernel.\n\nSee \"Further Refinement of the Subsonic Doublet-Lattice Method\" by William P. Rodden, Paul F. Taylor and Samuel C. McIntosh Jr.\n\n\n\n\n\n","category":"function"},{"location":"library/#DLM.steady_influence_coefficient","page":"Library","title":"DLM.steady_influence_coefficient","text":"steady_influence_coefficient(M, x0i, y0i, z0i, x0o, y0o, z0o, sγr, cγr)\n\nSolves for the steady component of the influence of the sending panel on the receiving panel using the vortex lattice method.\n\n\n\n\n\n","category":"function"},{"location":"library/#Index-1","page":"Library","title":"Index","text":"","category":"section"},{"location":"library/#","page":"Library","title":"Library","text":"","category":"page"},{"location":"#DLM.jl-1","page":"Home","title":"DLM.jl","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"(Image: ) (Image: )","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Pure Julia implementation of the Doublet Lattice Method","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Author: Taylor McDonnell","category":"page"},{"location":"#","page":"Home","title":"Home","text":"DLM.jl is a pure Julia implementation of the Doublet Lattice Method.","category":"page"},{"location":"#Package-Features-1","page":"Home","title":"Package Features","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Capable of modeling multiple arbitrarily defined trapezoidal geometries\nHighly accurate 12-term exponential approximation of the kernel integrals\nMultiple options for fits of the linear and nonlinear terms of the kernel function\nWith the parabolic fit:\nCapable of accurately handling panel aspect ratios of up to 3\nWith the quartic fit:\nCapable of accurately handling panel aspect ratios of up to 6-10\nSimple result visualization with WriteVTK\nValidated against published Doublet Lattice Method results.\nAllocation-free code","category":"page"},{"location":"#Installation-1","page":"Home","title":"Installation","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Enter the package manager by typing ] and then run the following:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"pkg> add https://github.com/byuflowlab/DLM.jl","category":"page"},{"location":"#Performance-1","page":"Home","title":"Performance","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"This package was originally created based on the Python/Fortran DLM implementation in dlm4py. The DLM implemented in this package is roughly 50% slower than that Fortran implementation.  However, since this package is implemented in pure Julia, it can be used with automatic differentiation as implemented by the ForwardDiff or ReverseDiff packages, or used with other dynamic language features.","category":"page"},{"location":"#Usage-1","page":"Home","title":"Usage","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"See the example","category":"page"},{"location":"example/#Example-1","page":"Example","title":"Example","text":"","category":"section"},{"location":"example/#","page":"Example","title":"Example","text":"This example shows how to use DLM.jl to solve for the lift coefficient slope of a rectangular wing with an aspect ratio of 20 pitching about its midchord.","category":"page"},{"location":"example/#","page":"Example","title":"Example","text":"Pages = [\"example.md\"]\nDepth = 3","category":"page"},{"location":"example/#","page":"Example","title":"Example","text":"using DLM","category":"page"},{"location":"example/#Defining-the-geometry-1","page":"Example","title":"Defining the geometry","text":"","category":"section"},{"location":"example/#","page":"Example","title":"Example","text":"Surfaces are defined in DLM.jl by creating rectangular grids with shape (3, ni, nj).  The first dimension is used for the x, y, and z coordinates, respectively.  The second dimension is used for the grid index in the chordwise direction.  The third dimension is used for the grid index in the spanwise direction.","category":"page"},{"location":"example/#","page":"Example","title":"Example","text":"Here we will create the AR 20 wing with 10 panels in the chordwise direction and 40 panels in the spanwise direction.","category":"page"},{"location":"example/#","page":"Example","title":"Example","text":"  AR = 20\n\n  nchord = 10\n  nspan = 40\n\n  b = 10\n  semispan = b/2\n  chord = b/AR\n  symmetric = true\n\n  xyz = zeros(3, nchord+1, nspan+1)\n  for i = 1:nchord+1\n      for j = 1:nspan+1\n          xyz[1, i, j] = chord*(i-1)/nchord\n          xyz[2, i, j] = semispan*(j-1)/nspan\n      end\n  end\n  nothing #hide","category":"page"},{"location":"example/#","page":"Example","title":"Example","text":"Using this convention, the geometry can be easily visualized using WriteVTK.","category":"page"},{"location":"example/#","page":"Example","title":"Example","text":"using WriteVTK\n\n# add extra dimension for WriteVTK\nxyz_vtk = reshape(xyz, size(xyz)..., 1)\n\n# initialize vtk file\nvtkfile = vtk_grid(\"example\", xyz_vtk)\n\n# save the vtk file\nvtk_save(vtkfile)\nnothing #hide","category":"page"},{"location":"example/#","page":"Example","title":"Example","text":"(Image: )","category":"page"},{"location":"example/#Setting-the-flow-conditions-1","page":"Example","title":"Setting the flow conditions","text":"","category":"section"},{"location":"example/#","page":"Example","title":"Example","text":"For this example we will use the following flow properties:","category":"page"},{"location":"example/#","page":"Example","title":"Example","text":"Velocity: 10 m/s\nMach Number: 0 (Incompressible)\nReduced Frequency (based on chord): [0, 0.5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]","category":"page"},{"location":"example/#","page":"Example","title":"Example","text":"U = 10\nM = 0.0\nkr = [0, 0.5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nnothing #hide","category":"page"},{"location":"example/#Solving-for-the-lift-slope-1","page":"Example","title":"Solving for the lift slope","text":"","category":"section"},{"location":"example/#","page":"Example","title":"Example","text":"To solve for the lift slope we perform the following steps:","category":"page"},{"location":"example/#","page":"Example","title":"Example","text":"Construct the AIC matrix\nFind the downwash on each panel's control point\nSolve the system to find the pressure coefficients\nIntegrate to find the lift coefficient","category":"page"},{"location":"example/#","page":"Example","title":"Example","text":"AIC = zeros(Complex{Float64}, nchord, nspan, nchord, nspan)\nw = zeros(Complex{Float64}, nchord, nspan)\nCL = zeros(Complex{Float64}, length(kr))\n\nfor k = 1:length(kr)\n\n    # compute circular frequency\n    ω = U*kr[k]/(chord)\n\n    # calculate AIC\n    influence_matrix!(AIC, ω, U, M, xyz, true)\n\n    # calculate downwash\n    for i = 1:nchord\n        for j = 1:nspan\n            # get control point x-location\n            x1 = (1/2)*xyz[1,i,j] + (1/2)*xyz[1,i,j+1]\n            x2 = (1/2)*xyz[1,i+1,j] + (1/2)*xyz[1,i+1,j+1]\n            x = (1/4)*x1 + (3/4)*x2\n            # compute downwash\n            # -1/U*(dh/dt + U*dh/dx), where h = (x - 0.5c)*e^{j*omega*t}\n            w[i,j] = -1.0 - 1im*(ω/U)*(x-0.5*chord)\n        end\n    end\n\n    # solve the system to get the pressure coefficients\n    Cp = pressure_coefficients(AIC, w)\n\n    # integrate to find the lift slope\n    CL[k] = sum(Cp)/(nspan*nchord)\nend\n\nprintln(CL)\nnothing #hide","category":"page"},{"location":"example/#Examine-the-Results-1","page":"Example","title":"Examine the Results","text":"","category":"section"},{"location":"example/#","page":"Example","title":"Example","text":"This exact analysis was performed by van Zyl in \"Robustness of the subsonic doublet lattice method\".  Here's a comparison of our results to van Zyl's results:","category":"page"},{"location":"example/#","page":"Example","title":"Example","text":"using Plots\npyplot()\n\n# 10 x 40 - extracted from plot\nCL_van_Zyl = [5.5+0.0im, 4.3+0.2im, 3.8+1.5im, 3.4+4.0im, 3.2+6.2im, 2.9+8.2im,\n    2.6+9.9im, 2.3+11.3im, 2.0+12.4im, 1.7+13.2im, 1.4+13.8im, 1.1+14.0im]\n\np1 = plot(grid=false, overwrite_figure=false,\n    xlabel=\"k\", xlim=(0,10), xticks=0:2:10,\n    ylabel=\"\\$Re(C_{L\\\\alpha})\\$\", ylim=(-1,7), yticks=-1:7)\nscatter!(kr, real(CL_van_Zyl), label=\"van Zyl\")\nscatter!(kr, real(CL), label=\"DLM.jl\")\n\np2 = plot(grid=false, overwrite_figure=false,\n    xlabel=\"k\", xlim=(0,10), xticks=0:2:10,\n    ylabel=\"\\$Im(C_{L\\\\alpha})\\$\", ylim=(-5,30), yticks=-5:5:30)\nscatter!(kr, imag(CL_van_Zyl), label=\"van Zyl\")\nscatter!(kr, imag(CL), label=\"DLM.jl\")\n\nplot(p1, p2, layout=(1,2), show=true)\nsavefig(\"comparison.svg\")\n\nnothing #hide","category":"page"},{"location":"example/#","page":"Example","title":"Example","text":"(Image: )","category":"page"},{"location":"example/#","page":"Example","title":"Example","text":"As you can see, the results match exactly.  This is actually not surprising, since the doublet lattice method implementation in DLM.jl is based on the same theory as the doublet lattice method used by van Zyl.","category":"page"},{"location":"example/#Evaluating-the-Accuracy-of-the-Results-1","page":"Example","title":"Evaluating the Accuracy of the Results","text":"","category":"section"},{"location":"example/#","page":"Example","title":"Example","text":"Even though our results matched those of van Zyl, that doesn't mean that they are accurate.  Here we show an excerpt from van Zyl's paper which shows just how accurate our analysis is:","category":"page"},{"location":"example/#","page":"Example","title":"Example","text":"(Image: )","category":"page"},{"location":"example/#","page":"Example","title":"Example","text":"The extrapolated solution shown in the figure is effectively the grid-converged solution, which is pretty close to the analytical solution for an infinite aspect-ratio wing.  The doublet lattice results for the 10x10 and 10x40 grids, however, fail to be accurate past a reduced frequency of 2 due to the coarseness of the grid in the chordwise direction.","category":"page"},{"location":"example/#","page":"Example","title":"Example","text":"While doing a grid-independent study is the only sure way of knowing whether your discretization has converged to the correct pressure distribution, previous studies have suggested specified numbers of panels per wavelength in order to resolve the pressure distribution.","category":"page"},{"location":"example/#","page":"Example","title":"Example","text":"Rodden, Taylor, and McIntosh suggested that 50 panels per wavelength may be sufficient to resolve the pressure distribution, with an absolute minimum number of panels of 4.","category":"page"},{"location":"example/#","page":"Example","title":"Example","text":"# use standard definition of reduced frequency based on semi-chord\nkr = [0, 1, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n\n# minimum number of chordwise panels to resolve pressure distribution\nnchord = max.(4, ceil.(Int, 50 .* kr./pi))\nprintln(\"Number of chordwise panels: \", nchord)\n\n# minimum number of spanwise panels for parabolic kernel (maximum panel aspect ratio of 3)\nnspan_parabolic = ceil.(Int, nchord*(AR/2)*1/3)\nprintln(\"Minimum number of spanwise panels for parabolic kernel: \", nspan_parabolic)\n\n# minimum number of spanwise panels for quartic kernel (maximum panel aspect ratio of 6-10)\nnspan_quartic = ceil.(Int, nchord*(AR/2)*1/10)\nprintln(\"Minimum number of spanwise panels for quartic kernel: \", nspan_quartic)","category":"page"},{"location":"example/#","page":"Example","title":"Example","text":"Others, however, have suggested as few as 12 panels per wavelength is sufficient.  Ultimately the appropriate number of panels depends on how accurate the solution need to be.","category":"page"}]
}
